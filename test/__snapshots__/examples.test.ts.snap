// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`example 0.vanilla 1`] = `
"\`node migrate --help\` output:

...

\`node migrate up\` output:

{ event: 'migrating', name: '<<timestamp>>.users-table.js' }
{
  event: 'migrated',
  name: '<<timestamp>>.users-table.js',
  durationSeconds: ???
}
{ event: 'up', message: 'applied 1 migrations.' }

\`node migrate down\` output:

{ event: 'reverting', name: '<<timestamp>>.users-table.js' }
{
  event: 'reverted',
  name: '<<timestamp>>.users-table.js',
  durationSeconds: ???
}
{ event: 'down', message: 'reverted 1 migrations.' }

\`node migrate create --name new-migration.js\` output:

{
  event: 'created',
  path: '<<cwd>>/examples/0.vanilla/migrations/<<timestamp>>.new-migration.js'
}

\`node migrate up\` output:

{ event: 'migrating', name: '<<timestamp>>.users-table.js' }
{
  event: 'migrated',
  name: '<<timestamp>>.users-table.js',
  durationSeconds: ???
}
{ event: 'migrating', name: '<<timestamp>>.new-migration.js' }
{
  event: 'migrated',
  name: '<<timestamp>>.new-migration.js',
  durationSeconds: ???
}
{ event: 'up', message: 'applied 2 migrations.' }

\`node migrate down --to 0\` output:

{ event: 'reverting', name: '<<timestamp>>.new-migration.js' }
{
  event: 'reverted',
  name: '<<timestamp>>.new-migration.js',
  durationSeconds: ???
}
{ event: 'reverting', name: '<<timestamp>>.users-table.js' }
{
  event: 'reverted',
  name: '<<timestamp>>.users-table.js',
  durationSeconds: ???
}
{ event: 'down', message: 'reverted 2 migrations.' }"
`;

exports[`example 1.sequelize-typescript 1`] = `
"\`node migrate --help\` output:

...

\`node migrate up\` output:

Executing (default): SELECT name FROM sqlite_master WHERE type='table' AND name='SequelizeMeta';
Executing (default): CREATE TABLE IF NOT EXISTS \`SequelizeMeta\` (\`name\` VARCHAR(255) NOT NULL UNIQUE PRIMARY KEY);
Executing (default): PRAGMA INDEX_LIST(\`SequelizeMeta\`)
Executing (default): PRAGMA INDEX_INFO(\`sqlite_autoindex_SequelizeMeta_1\`)
Executing (default): SELECT \`name\` FROM \`SequelizeMeta\` AS \`SequelizeMeta\` ORDER BY \`SequelizeMeta\`.\`name\` ASC;
{ event: 'migrating', name: '<<timestamp>>.users-table.ts' }
Executing (default): CREATE TABLE IF NOT EXISTS \`users\` (\`id\` INTEGER PRIMARY KEY, \`name\` VARCHAR(255) NOT NULL);
Executing (default): SELECT name FROM sqlite_master WHERE type='table' AND name='SequelizeMeta';
Executing (default): PRAGMA INDEX_LIST(\`SequelizeMeta\`)
Executing (default): PRAGMA INDEX_INFO(\`sqlite_autoindex_SequelizeMeta_1\`)
Executing (default): INSERT INTO \`SequelizeMeta\` (\`name\`) VALUES ($1);
{
  event: 'migrated',
  name: '<<timestamp>>.users-table.ts',
  durationSeconds: ???
}
{ event: 'up', message: 'applied 1 migrations.' }

\`node migrate down\` output:

Executing (default): SELECT name FROM sqlite_master WHERE type='table' AND name='SequelizeMeta';
Executing (default): PRAGMA INDEX_LIST(\`SequelizeMeta\`)
Executing (default): PRAGMA INDEX_INFO(\`sqlite_autoindex_SequelizeMeta_1\`)
Executing (default): SELECT \`name\` FROM \`SequelizeMeta\` AS \`SequelizeMeta\` ORDER BY \`SequelizeMeta\`.\`name\` ASC;
{ event: 'reverting', name: '<<timestamp>>.users-table.ts' }
Executing (default): DROP TABLE IF EXISTS \`users\`;
Executing (default): SELECT name FROM sqlite_master WHERE type='table' AND name='SequelizeMeta';
Executing (default): PRAGMA INDEX_LIST(\`SequelizeMeta\`)
Executing (default): PRAGMA INDEX_INFO(\`sqlite_autoindex_SequelizeMeta_1\`)
Executing (default): DELETE FROM \`SequelizeMeta\` WHERE \`name\` = '<<timestamp>>.users-table.ts'
{
  event: 'reverted',
  name: '<<timestamp>>.users-table.ts',
  durationSeconds: ???
}
{ event: 'down', message: 'reverted 1 migrations.' }

\`node migrate down --to 0\` output:

Executing (default): SELECT name FROM sqlite_master WHERE type='table' AND name='SequelizeMeta';
Executing (default): PRAGMA INDEX_LIST(\`SequelizeMeta\`)
Executing (default): PRAGMA INDEX_INFO(\`sqlite_autoindex_SequelizeMeta_1\`)
Executing (default): SELECT \`name\` FROM \`SequelizeMeta\` AS \`SequelizeMeta\` ORDER BY \`SequelizeMeta\`.\`name\` ASC;
{ event: 'down', message: 'reverted 0 migrations.' }

\`node migrate up --step 2\` output:

Executing (default): SELECT name FROM sqlite_master WHERE type='table' AND name='SequelizeMeta';
Executing (default): PRAGMA INDEX_LIST(\`SequelizeMeta\`)
Executing (default): PRAGMA INDEX_INFO(\`sqlite_autoindex_SequelizeMeta_1\`)
Executing (default): SELECT \`name\` FROM \`SequelizeMeta\` AS \`SequelizeMeta\` ORDER BY \`SequelizeMeta\`.\`name\` ASC;
{ event: 'migrating', name: '<<timestamp>>.users-table.ts' }
Executing (default): CREATE TABLE IF NOT EXISTS \`users\` (\`id\` INTEGER PRIMARY KEY, \`name\` VARCHAR(255) NOT NULL);
Executing (default): SELECT name FROM sqlite_master WHERE type='table' AND name='SequelizeMeta';
Executing (default): PRAGMA INDEX_LIST(\`SequelizeMeta\`)
Executing (default): PRAGMA INDEX_INFO(\`sqlite_autoindex_SequelizeMeta_1\`)
Executing (default): INSERT INTO \`SequelizeMeta\` (\`name\`) VALUES ($1);
{
  event: 'migrated',
  name: '<<timestamp>>.users-table.ts',
  durationSeconds: ???
}
{ event: 'up', message: 'applied 1 migrations.' }

\`node migrate create --name new-migration.ts\` output:

{
  event: 'created',
  path: '<<cwd>>/examples/1.sequelize-typescript/migrations/<<timestamp>>.new-migration.ts'
}
Executing (default): SELECT name FROM sqlite_master WHERE type='table' AND name='SequelizeMeta';
Executing (default): PRAGMA INDEX_LIST(\`SequelizeMeta\`)
Executing (default): PRAGMA INDEX_INFO(\`sqlite_autoindex_SequelizeMeta_1\`)
Executing (default): SELECT \`name\` FROM \`SequelizeMeta\` AS \`SequelizeMeta\` ORDER BY \`SequelizeMeta\`.\`name\` ASC;"
`;

exports[`example 2.es-modules 1`] = `
"\`node umzug.mjs --help\` output:

...

\`node umzug.mjs up\` output:

{ event: 'migrating', name: '<<timestamp>>.users-table.mjs' }
{
  event: 'migrated',
  name: '<<timestamp>>.users-table.mjs',
  durationSeconds: ???
}
{ event: 'migrating', name: '<<timestamp>>.roles-table.cjs' }
{
  event: 'migrated',
  name: '<<timestamp>>.roles-table.cjs',
  durationSeconds: ???
}
{ event: 'up', message: 'applied 2 migrations.' }

\`node umzug.mjs down\` output:

{ event: 'reverting', name: '<<timestamp>>.roles-table.cjs' }
{
  event: 'reverted',
  name: '<<timestamp>>.roles-table.cjs',
  durationSeconds: ???
}
{ event: 'down', message: 'reverted 1 migrations.' }

\`node umzug.mjs create --name new-migration-1.cjs\` output:

{
  event: 'created',
  path: '<<cwd>>/examples/2.es-modules/migrations/<<timestamp>>.new-migration-1.cjs'
}

\`node umzug.mjs create --name new-migration-2.mjs\` output:

{
  event: 'created',
  path: '<<cwd>>/examples/2.es-modules/migrations/<<timestamp>>.new-migration-2.mjs'
}"
`;

exports[`example 3.raw-sql 1`] = `
"\`node migrate up\` output:

Executing (default): create table if not exists my_migrations_table(name text)
Executing (default): select name from my_migrations_table
{ event: 'migrating', name: '<<timestamp>>.users.sql' }
Executing (default): create table users(id int, name text);
Executing (default): insert into my_migrations_table(name) values ($1)
{
  event: 'migrated',
  name: '<<timestamp>>.users.sql',
  durationSeconds: ???
}
{ event: 'up', message: 'applied 1 migrations.' }"
`;

exports[`example 4.sequelize-seeders 1`] = `
"\`node migrate --help\` output:

...

\`node seed --help\` output:

...

\`node seed up || echo failed\` output:

Executing (default): SELECT name FROM sqlite_master WHERE type='table' AND name='seeder_meta';
Executing (default): CREATE TABLE IF NOT EXISTS \`seeder_meta\` (\`name\` VARCHAR(255) NOT NULL UNIQUE PRIMARY KEY);
Executing (default): PRAGMA INDEX_LIST(\`seeder_meta\`)
Executing (default): PRAGMA INDEX_INFO(\`sqlite_autoindex_seeder_meta_1\`)
Executing (default): SELECT \`name\` FROM \`seeder_meta\` AS \`seeder_meta\` ORDER BY \`seeder_meta\`.\`name\` ASC;
{ event: 'migrating', name: '<<timestamp>>.sample-users.ts' }
Executing (default): INSERT INTO \`users\` (\`id\`,\`name\`) VALUES (1,'Alice'),(2,'Bob');
failed

\`node migrate up\` output:

Executing (default): SELECT name FROM sqlite_master WHERE type='table' AND name='migration_meta';
Executing (default): CREATE TABLE IF NOT EXISTS \`migration_meta\` (\`name\` VARCHAR(255) NOT NULL UNIQUE PRIMARY KEY);
Executing (default): PRAGMA INDEX_LIST(\`migration_meta\`)
Executing (default): PRAGMA INDEX_INFO(\`sqlite_autoindex_migration_meta_1\`)
Executing (default): SELECT \`name\` FROM \`migration_meta\` AS \`migration_meta\` ORDER BY \`migration_meta\`.\`name\` ASC;
{ event: 'migrating', name: '<<timestamp>>.users-table.ts' }
Executing (default): CREATE TABLE IF NOT EXISTS \`users\` (\`id\` INTEGER PRIMARY KEY, \`name\` VARCHAR(255) NOT NULL);
Executing (default): SELECT name FROM sqlite_master WHERE type='table' AND name='migration_meta';
Executing (default): PRAGMA INDEX_LIST(\`migration_meta\`)
Executing (default): PRAGMA INDEX_INFO(\`sqlite_autoindex_migration_meta_1\`)
Executing (default): INSERT INTO \`migration_meta\` (\`name\`) VALUES ($1);
{
  event: 'migrated',
  name: '<<timestamp>>.users-table.ts',
  durationSeconds: ???
}
{ event: 'migrating', name: '<<timestamp>>.roles.ts' }
Executing (default): CREATE TABLE IF NOT EXISTS \`roles\` (\`id\` INTEGER PRIMARY KEY, \`name\` VARCHAR(255) NOT NULL);
Executing (default): CREATE TABLE IF NOT EXISTS \`user_roles\` (\`user_id\` INTEGER NOT NULL REFERENCES \`users\` (\`id\`), \`role_id\` INTEGER NOT NULL REFERENCES \`roles\` (\`id\`), PRIMARY KEY (\`user_id\`, \`role_id\`));
Executing (default): SELECT name FROM sqlite_master WHERE type='table' AND name='migration_meta';
Executing (default): PRAGMA INDEX_LIST(\`migration_meta\`)
Executing (default): PRAGMA INDEX_INFO(\`sqlite_autoindex_migration_meta_1\`)
Executing (default): INSERT INTO \`migration_meta\` (\`name\`) VALUES ($1);
{
  event: 'migrated',
  name: '<<timestamp>>.roles.ts',
  durationSeconds: ???
}
{ event: 'up', message: 'applied 2 migrations.' }

\`node seed up\` output:

Executing (default): SELECT name FROM sqlite_master WHERE type='table' AND name='seeder_meta';
Executing (default): PRAGMA INDEX_LIST(\`seeder_meta\`)
Executing (default): PRAGMA INDEX_INFO(\`sqlite_autoindex_seeder_meta_1\`)
Executing (default): SELECT \`name\` FROM \`seeder_meta\` AS \`seeder_meta\` ORDER BY \`seeder_meta\`.\`name\` ASC;
{ event: 'migrating', name: '<<timestamp>>.sample-users.ts' }
Executing (default): INSERT INTO \`users\` (\`id\`,\`name\`) VALUES (1,'Alice'),(2,'Bob');
Executing (default): SELECT name FROM sqlite_master WHERE type='table' AND name='seeder_meta';
Executing (default): PRAGMA INDEX_LIST(\`seeder_meta\`)
Executing (default): PRAGMA INDEX_INFO(\`sqlite_autoindex_seeder_meta_1\`)
Executing (default): INSERT INTO \`seeder_meta\` (\`name\`) VALUES ($1);
{
  event: 'migrated',
  name: '<<timestamp>>.sample-users.ts',
  durationSeconds: ???
}
{
  event: 'migrating',
  name: '<<timestamp>>.sample-user-roles.ts'
}
Executing (default): INSERT INTO \`roles\` (\`id\`,\`name\`) VALUES (1,'admin');
Executing (default): INSERT INTO \`user_roles\` (\`user_id\`,\`role_id\`) VALUES (1,1);
Executing (default): SELECT name FROM sqlite_master WHERE type='table' AND name='seeder_meta';
Executing (default): PRAGMA INDEX_LIST(\`seeder_meta\`)
Executing (default): PRAGMA INDEX_INFO(\`sqlite_autoindex_seeder_meta_1\`)
Executing (default): INSERT INTO \`seeder_meta\` (\`name\`) VALUES ($1);
{
  event: 'migrated',
  name: '<<timestamp>>.sample-user-roles.ts',
  durationSeconds: ???
}
{ event: 'up', message: 'applied 2 migrations.' }

\`node seed down --to 0\` output:

Executing (default): SELECT name FROM sqlite_master WHERE type='table' AND name='seeder_meta';
Executing (default): PRAGMA INDEX_LIST(\`seeder_meta\`)
Executing (default): PRAGMA INDEX_INFO(\`sqlite_autoindex_seeder_meta_1\`)
Executing (default): SELECT \`name\` FROM \`seeder_meta\` AS \`seeder_meta\` ORDER BY \`seeder_meta\`.\`name\` ASC;
{
  event: 'reverting',
  name: '<<timestamp>>.sample-user-roles.ts'
}
Executing (default): DELETE FROM \`user_roles\` WHERE \`user_id\` IN (1)
Executing (default): DELETE FROM \`roles\` WHERE \`id\` IN (1)
Executing (default): SELECT name FROM sqlite_master WHERE type='table' AND name='seeder_meta';
Executing (default): PRAGMA INDEX_LIST(\`seeder_meta\`)
Executing (default): PRAGMA INDEX_INFO(\`sqlite_autoindex_seeder_meta_1\`)
Executing (default): DELETE FROM \`seeder_meta\` WHERE \`name\` = '<<timestamp>>.sample-user-roles.ts'
{
  event: 'reverted',
  name: '<<timestamp>>.sample-user-roles.ts',
  durationSeconds: ???
}
{ event: 'reverting', name: '<<timestamp>>.sample-users.ts' }
Executing (default): DELETE FROM \`users\` WHERE \`id\` IN (1, 2)
Executing (default): SELECT name FROM sqlite_master WHERE type='table' AND name='seeder_meta';
Executing (default): PRAGMA INDEX_LIST(\`seeder_meta\`)
Executing (default): PRAGMA INDEX_INFO(\`sqlite_autoindex_seeder_meta_1\`)
Executing (default): DELETE FROM \`seeder_meta\` WHERE \`name\` = '<<timestamp>>.sample-users.ts'
{
  event: 'reverted',
  name: '<<timestamp>>.sample-users.ts',
  durationSeconds: ???
}
{ event: 'down', message: 'reverted 2 migrations.' }

\`node seed create --name new-seed-data.ts\` output:

{
  event: 'created',
  path: '<<cwd>>/examples/4.sequelize-seeders/seeders/<<timestamp>>.new-seed-data.ts'
}
Executing (default): SELECT name FROM sqlite_master WHERE type='table' AND name='seeder_meta';
Executing (default): PRAGMA INDEX_LIST(\`seeder_meta\`)
Executing (default): PRAGMA INDEX_INFO(\`sqlite_autoindex_seeder_meta_1\`)
Executing (default): SELECT \`name\` FROM \`seeder_meta\` AS \`seeder_meta\` ORDER BY \`seeder_meta\`.\`name\` ASC;"
`;

exports[`example 5.custom-template 1`] = `
"\`node migrate create --name new-migration.ts\` output:

{
  event: 'created',
  path: 'migrations/<<timestamp>>.new-migration.ts'
}
Executing (default): SELECT name FROM sqlite_master WHERE type='table' AND name='SequelizeMeta';
Executing (default): CREATE TABLE IF NOT EXISTS \`SequelizeMeta\` (\`name\` VARCHAR(255) NOT NULL UNIQUE PRIMARY KEY);
Executing (default): PRAGMA INDEX_LIST(\`SequelizeMeta\`)
Executing (default): PRAGMA INDEX_INFO(\`sqlite_autoindex_SequelizeMeta_1\`)
Executing (default): SELECT \`name\` FROM \`SequelizeMeta\` AS \`SequelizeMeta\` ORDER BY \`SequelizeMeta\`.\`name\` ASC;"
`;

exports[`example 6.events 1`] = `
"\`node migrate up\` output:

shutting down...
Executing (default): SELECT name FROM sqlite_master WHERE type='table' AND name='SequelizeMeta';
Executing (default): CREATE TABLE IF NOT EXISTS \`SequelizeMeta\` (\`name\` VARCHAR(255) NOT NULL UNIQUE PRIMARY KEY);
Executing (default): PRAGMA INDEX_LIST(\`SequelizeMeta\`)
Executing (default): PRAGMA INDEX_INFO(\`sqlite_autoindex_SequelizeMeta_1\`)
Executing (default): SELECT \`name\` FROM \`SequelizeMeta\` AS \`SequelizeMeta\` ORDER BY \`SequelizeMeta\`.\`name\` ASC;
{ event: 'migrating', name: '<<timestamp>>.users-table.ts' }
Executing (default): CREATE TABLE IF NOT EXISTS \`users\` (\`id\` INTEGER PRIMARY KEY, \`name\` VARCHAR(255) NOT NULL);
Executing (default): SELECT name FROM sqlite_master WHERE type='table' AND name='SequelizeMeta';
Executing (default): PRAGMA INDEX_LIST(\`SequelizeMeta\`)
Executing (default): PRAGMA INDEX_INFO(\`sqlite_autoindex_SequelizeMeta_1\`)
Executing (default): INSERT INTO \`SequelizeMeta\` (\`name\`) VALUES ($1);
{
  event: 'migrated',
  name: '<<timestamp>>.users-table.ts',
  durationSeconds: ???
}
restarting!
{ event: 'up', message: 'applied 1 migrations.' }"
`;

exports[`example 7.bundling-codegen 1`] = `
"\`npm install\` output:

...

\`npm run lint -- --fix\` output:

...

\`npm run build\` output:

...

\`node migrate up\` output:

{ event: 'migrating', name: './<<timestamp>>.users-table.ts' }
{
  event: 'migrated',
  name: './<<timestamp>>.users-table.ts',
  durationSeconds: ???
}
{ event: 'migrating', name: './<<timestamp>>.roles-table.ts' }
{
  event: 'migrated',
  name: './<<timestamp>>.roles-table.ts',
  durationSeconds: ???
}
{ event: 'up', message: 'applied 2 migrations.' }

\`node migrate create --name new-migration.ts --skip-verify\` output:

{ event: 'created', path: '<<timestamp>>.new-migration.ts' }

\`npm run lint -- --fix\` output:

..."
`;
